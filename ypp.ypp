%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM STR NUM
%token <o> LQ RQ LC RC
%token <o> EQ AT COLON
%token <o> ADD SUB MUL DIV POW
%type <o> ex scalar list lambda
%%
REPL : | REPL ex		{ cout << $2->eval()->dump(); } ;
ex : scalar
	| LQ list RQ		{ $$=$2; }
	| LC lambda RC		{ $$=$2; }
	| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }  
	| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }  
	| ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }  
;
scalar : SYM | STR | NUM ;
list :					{ $$=new List(); }
	| list ex			{ $$=$1; $$->push($2); }
;
lambda :				{ $$=new Lambda(); }
	| lambda ex			{ $$=$1; $$->push($2); }
	| lambda SYM COLON	{ $$=$1; $$->par($2); }
;
%%